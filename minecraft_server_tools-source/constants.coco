import os
import re
import sys
from datetime import timedelta

import psutil
try:
    from jsoncomment import JsonComment
except ImportError:
    print("\nWARNING: Could not import jsoncomment.")
    JsonComment = None


# Utilities

def ver_join(ver):
    return ".".join(str(i) for i in ver)

def ver_split(ver_str):
    return tuple(int(i) for i in ver_str.split("."))

def regex(re_str):
    return re.compile(re_str, re.UNICODE)

def full_regex(re_str):
    return regex("^" + re_str + "$")

def format_vers(template):
    return template.format(
        mc_version=ver_join(MC_VERSION),
        forge_version=ver_join(FORGE_VERSION),
    )

def fixpath(path):
    return os.path.normpath(os.path.abspath(os.path.expanduser(path)))

def first_that_exists(path_list):
    for path in path_list:
        if path is not None:
            path = fixpath(path)
            if os.path.exists(path):
                return path
    return [p for p in path_list if p is not None][0]

def bool_env_var(env_var, default):
    got = os.getenv(env_var)
    if got is None:
        return default
    got = got.lower()
    if got in YES_STRS:
        return True
    elif got in NO_STRS:
        return False
    else:
        return default

WINDOWS = os.name == "nt"

YES_STRS = [
    "y",
    "yes",
    "t",
    "true",
    "1",
]

NO_STRS = [
    "n",
    "no",
    "f",
    "false",
    "0",
]


# Commonly changed constants

MC_VERSION = (1, 20, 1)
FORGE_VERSION = (47, 3, 0)

SERVER_DIR = first_that_exists([
    os.getenv("MINECRAFT_SERVER_DIR"),
    "~/OneDrive/Minecraft/1.20 Mod Server",
])

ALT_MOD_ZIP_PATH = fixpath("~/Dropbox/Minecraft Mods/Minecraft Mods.zip")

MOD_ZIP_PATH = first_that_exists([
    "D:\\\\Minecraft Mods.zip",
    "~/OneDrive/Minecraft/Minecraft Mods/Minecraft Mods.zip",
    "~/OneDrive/Minecraft Mods/Minecraft Mods.zip",
    ALT_MOD_ZIP_PATH,
    "~/Downloads/Minecraft Mods.zip",
])

DOWNLOADS_PATH = first_that_exists([
    "~/Downloads",
])

IS_MOD_SERVER = "mod" in SERVER_DIR.lower()

if IS_MOD_SERVER:
    CLIENT_RAM = "26G"
    # SERVER_RAM = "9G"
    SERVER_RAM = "18G"
else:
    CLIENT_RAM = SERVER_RAM = "5G"

ALWAYS_USE_LATEST_VERSION_FOR_MODS = [
    "jei",
    "toofast",
    "gottagofast",
    "supplementaries",
    "packet fixer",
    "embeddium",
    "oculus",
    "immediately fast",
]

NON_CURSEFORGE_MODS = [
    "opti fine",
    "preview opti fine",
    "create structures",
    "memoryleakfix",
]

EXTRA_INSTALL_FOLDERS = [
    "config",
    "defaultconfigs",
    "kubejs",
    "resourcepacks",
    "datapacks",
    "scripts",
    "global_data_packs",
    "global_resource_packs",
    "paintings",
    "shrines-data",
    "packmenu",
    "global_packs",
    "patchouli_books",
    "modernfix",
    "configureddefaults",
    "blueprints",
]

EXTRA_INSTALL_FILES = [
    "patchouli_data.json",
]

OPTIONAL_INSTALL_FILES = [
    "options.txt",
    "optionsof.txt",
    "optionsshaders.txt",
]

OPTIONAL_INSTALL_FOLDERS = [
    os.path.join("journeymap", "config"),
    "shaderpacks",
    "ESM",
]

PRINT_DEBUG = bool_env_var("MC_DEBUG_PRINT", False)
JPS_DEBUG = bool_env_var("MC_DEBUG_JPS", False)  # filter jstack: ^(\s*(at java|at jdk|at sun|at net.minecraft|at io.netty)\b)[^\n]*\n*
LOG4J_DEBUG = bool_env_var("MC_DEBUG_LOG4J", False)


# Fix RAMs

GB = 1024**3
max_client_ram = psutil.virtual_memory().total // GB - 2
max_server_ram = psutil.virtual_memory().total // GB - 3

if int(CLIENT_RAM[:-1]) > max_client_ram:
    print(f"\nWARNING: Reducing client RAM from {CLIENT_RAM} to {max_client_ram}G.")
    CLIENT_RAM = str(max_client_ram) + "G"

if int(SERVER_RAM[:-1]) > max_server_ram:
    print(f"\nWARNING: Reducing server RAM from {SERVER_RAM} to {max_server_ram}G.")
    SERVER_RAM = str(max_server_ram) + "G"


# Load secrets

SECRETS_FILE = os.path.join(SERVER_DIR, "secrets.json")


def load_json(filename, default=None):
    assert COMMENT_JSON is not None, "loading json requires JsonComment"
    try:
        with open(filename, "r") as fp:
            return COMMENT_JSON.load(fp)
    except (FileNotFoundError, ValueError):
        return default


if JsonComment is None:
    COMMENT_JSON = SECRETS = None
else:
    COMMENT_JSON = JsonComment()
    SECRETS = load_json(SECRETS_FILE, {})
    if SECRETS:
        os.environ["CURSEFORGE_API_KEY"] = SECRETS["curseforge_api_key"]


# Mod sync constants

MODS_NAME = "mods"
BASE_MODS_NAME = MODS_NAME + "-base"
EXTRA_MODS_NAME = MODS_NAME + "-extra"
REMOVED_MODS_NAME = MODS_NAME + "-removed"
STAGING_MODS_NAME = MODS_NAME + "-staging"
DEDUPLICATE_MODS_NAME = MODS_NAME + "-deduplicate"

CLIENT_MODS_NAME = "client_mods"
BASE_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-base"
EXTRA_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-extra"
REMOVED_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-removed"
STAGING_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-staging"
DEDUPLICATE_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-deduplicate"


# Auto updater Constants

ROOT_DIR = os.path.dirname(os.path.dirname(__file__))

MODLOADER = "Forge"
WRONG_MODLOADERS = ["Fabric", "Quilt"]
MAYBE_WRONG_MODLOADERS = ["NeoForge"]

COMPONENT_SEPS = [
    ("-", 2),
    ("(", 1),
    ("+", 2),
    ("-", 1),
    ("_", 2),
    (" ", 2),
    ("+", 1),
    ("_", 1),
    (" ", 1),
]

NON_NAME_COMPONENT_REGEX = full_regex(
    r"[0-9].*|"
    + r"(?!cave|a$|ae2|rare|da)((forge|fabric|quilt|dist(ro)?|release|alpha|beta)(\..*)?|(mc|v|r)?[0-9.+_\-x()[\]]*(a|b|c|d|e|m)?)+"
)

NAME_REGEXES_TO_SPACE = [
    regex(r) for r in (
        r"-",
        r"\+",
        r"_",
        r"\(",
        r"\)",
        r"%20",
        r"%5[bd]",
        r"%27",
        r"(neo)?forge\b",
        r"(NEO)?FORGE",
        r"(Neo)?Forge\b",
        r"fabric\b",
        r"FABRIC",
        r"Fabric\b",
        r"quilt\b",
        r"QUILT",
        r"Quilt\b",
        r"\bdist(ro)?",
        r"release",
        r"\balpha\b",
        r"\bALPHA\b",
        r"\bAlpha\b",
        r"\bbeta\b",
        r"\bBETA\b",
        r"\bBeta\b",
        r"MC",
        r"\bmc\b",
        r"1\.\d+",
        r"[.vV]0",
        r"[.vV]1",
        r"[.vV]2",
        r"[.vV]3",
        r"[.vV]4",
        r"[.vV]5",
        r"[.vV]6",
        r"[.vV]7",
        r"[.vV]8",
        r"[.vV]9",
        r"\.",
        r" / ",
        r" \| ",
        r"   ",
        r"  ",
        r" / ",
        r"\[ \]",
        r"  ",
    )
]

CURSEFORGE_NAME_ELEMS_TO_STRIP = [
    "-",
    "Download",
    "Files",
    "Mods",
    "Minecraft",
    "Curseforge",
    "...",
]

AVOID_FILES_PUBLISHED_WITHIN = timedelta(days=7)

MOD_PAGE_NAME_SUFFICES = (
    " - Files - Minecraft Mods - Curseforge",
    " - Comments - Minecraft Mods - Curseforge",
    " - Minecraft Mods - CurseForge",
)

# must start with {mod_name} {modloader}
GOOGLE_QUERY_TEMPLATE = '{mod_name} {modloader} {mc_version_2} "Minecraft Mods" -Modpacks'

CURSEFORGE_NAMES_FILE = os.path.join(ROOT_DIR, "curseforge_names.json")
FIX_MOD_NAMES = False

CURSEFORGE_API_FILE = os.path.join(ROOT_DIR, "curseforge_api.js")

CURSEFORGE_QUERY_TEMPLATES = [
    '"{curseforge_name}"',
    "{core_curseforge_name}",
    "{mod_name}",
]

TIMESTAMP_FORMAT_REGEX = full_regex(r"(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)\.?(\d+)?Z")

UPDATED_MODS_DIR_SUFFIX = "-updates"
OLD_MODS_DIR_SUFFIX = "-old"

MAX_DEBUG_RESULTS = 2

CURSEFORGE_API_RETRIES = 3
CURSEFORGE_API_RETRY_DELAY = 0.1


# Server start constants

USE_GRAAL = not JPS_DEBUG
USE_LARGE_PAGES = False

OS_NAME = (
    if WINDOWS then "windows"
    else if sys.platform == "darwin" then "macos"
    else "linux"
)

GRAAL_ZIP_NAME = f"graalvm-jdk-22_{OS_NAME}-x64_bin.zip"
GRAAL_URL = f"https://download.oracle.com/graalvm/22/latest/{GRAAL_ZIP_NAME}"

GRAAL_BASE_DIR = os.path.join(ROOT_DIR, "graal")
GRAAL_ZIP_PATH = os.path.join(GRAAL_BASE_DIR, GRAAL_ZIP_NAME)

# in my testing, G1 performs the best
CLIENT_GC = "G1"  # brucethemoose: G1, Shenandoah, or ZGenerational
SERVER_GC = "G1"  # brucethemoose: G1 or Z

def get_jvm_args(gc, vm, large_pages=USE_LARGE_PAGES):
    args = [
        # "-d64",  # OLD
        "-server",
        "-Xss6M",
        # "-XX:+AggressiveOpts",  # OLD
        "-XX:+UnlockExperimentalVMOptions",  # always
        "-XX:+UnlockDiagnosticVMOptions",  # brucethemoose
        "-XX:+AlwaysPreTouch",  # always
        "-XX:+DisableExplicitGC",  # always
        # "-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses",  # OLD

        "-XX:+OptimizeStringConcat",  # default: True
        "-XX:+UseCompressedOops",  # default: True
        "-XX:+ScavengeBeforeFullGC",  # default: True
        "-XX:+ParallelRefProcEnabled",  # aikar-flags
        # "-XX:+UseStringDeduplication",  # brucethemoose: False
        # "-XX:+OmitStackTraceInFastThrow",
        # "-XX:+UseLargePagesInMetaspace",  # OLD
        # "-XX:-UseBiasedLocking",  # hilltty-flags, deprecated by java
        "-XX:+AlwaysActAsServerClassMachine",  # brucethemoose
        "-XX:-DontCompileHugeMethods",  # brucethemoose
        "-XX:+UseFastUnorderedTimeStamps",  # brucethemoose
        "-XX:+UseCriticalJavaThreadPriority",  # brucethemoose
        "-XX:+EnableDynamicAgentLoading",  # java warning

        "-XX:MaxGCPauseMillis=37",  # brucethemoose: 37; atm: 200; default: 200
        "-XX:MaxMetaspaceExpansion=64M",  # default: 5M
        "-XX:NmethodSweepActivity=1",  # brucethemoose: 1
        "-XX:ReservedCodeCacheSize=400M",  # brucethemoose: 400M
        "-XX:NonNMethodCodeHeapSize=12M",  # brucethemoose: 12M
        "-XX:ProfiledCodeHeapSize=194M",  # brucethemoose: 194M
        "-XX:NonProfiledCodeHeapSize=194M",  # brucethemoose: 194M
        "-XX:ThreadPriorityPolicy=1",  # brucethemoose: 1
        f"-XX:ConcGCThreads={psutil.cpu_count(logical=False)*3//4}",  # brucethemoose: real cores - 2
    ]
    if not JPS_DEBUG:
        args += [
            "-XX:+PerfDisableSharedMem",  # aikar-flags, brucethemoose
        ]

    if large_pages:
        args += [
            "-XX:+UseLargePages",  # hilltty-flags, brucethemoose
            "-XX:LargePageSizeInBytes=2M",  # hilltty-flags, brucethemoose
        ]

    if vm == "java":
        args += [
            "-XX:+UseNUMA",  # hilltty-flags, brucethemoose: True; mukul1127: False
            "-XX:+UseVectorCmov",  # brucethemoose
            "-XX:MaxNodeLimit=240000",  # brucethemoose: 240000
            "-XX:NodeLimitFudgeFactor=8000",  # brucethemoose: 8000
        ]
    elif vm == "graal":
        args += [
            "-XX:+EagerJVMCI",  # brucethemoose
            "-Dgraal.TuneInlinerExploration=1",  # brucethemoose: 1
        ]
    else:
        raise ValueError(f"unknown java VM {vm!r}")

    if gc == "G1":
        args += [
            "-XX:+UseG1GC",
            "-XX:AllocatePrefetchStyle=3",  # brucethemoose: 3
            # "-XX:TargetSurvivorRatio=90",  # atm: 32; default: 50
            "-XX:SurvivorRatio=32",  # atm: 32; brucethemoose: 32; default: 8
            "-XX:InitiatingHeapOccupancyPercent=10",  # brucethemoose: 10; atm: 15; aikar: 20; default: 45
            "-XX:MaxTenuringThreshold=1",  # brucethemoose: 1; atm: 1; default: 15
            "-XX:G1ReservePercent=20",  # brucethemoose: 20; atm: 20; aikar: 15
            "-XX:G1NewSizePercent=23",  # brucethemoose: 23; atm: 30; aikar: 40
            "-XX:G1HeapRegionSize=32M",  # brucethemoose: 16M; atm: 8M; aikar: 16M
            "-XX:G1MixedGCCountTarget=3",  # brucethemoose: 3; atm: 4; default: 8
            "-XX:G1RSetUpdatingPauseTimePercent=0",  # brucethemoose: 0; atm: 5; default: 10
            # "-XX:G1MixedGCLiveThresholdPercent=35",  # atm: 90; default: 85
            # "-XX:G1MaxNewSizePercent=60",  # atm: 40; aikar: 50; default: 60
            "-XX:G1HeapWastePercent=20",  # brucethemoose: 20; atm: 5; default: 5
            "-XX:G1SATBBufferEnqueueingThresholdPercent=30",  # brucethemoose: 30
            "-XX:G1ConcMarkStepDurationMillis=5.0",  # brucethemoose: 5
            "-XX:GCTimeRatio=99",  # brucethemoose: 99
            "-XX:G1ConcRSHotCardLimit=16",  # brucethemoose: 16
            "-XX:G1ConcRefinementServiceIntervalMillis=150",  # brucethemoose: 150
        ]
    elif gc == "Shenandoah":
        args += [
            "-XX:+UseShenandoahGC",
            "-XX:AllocatePrefetchStyle=1",  # brucethemoose: 1
            "-XX:ShenandoahGCMode=iu",  # hilltty-flags
            "-XX:ShenandoahGuaranteedGCInterval=1000000",  # brucethemoose: 1000000
        ]
    elif gc == "Z":
        args += [
            "-XX:+UseZGC",
            "-XX:AllocatePrefetchStyle=1",  # brucethemoose: 1
            # "-XX:-ZProactive",  # brucethemoose (incompatible with +ZGenerational)
            "-XX:+ZGenerational",  # brucethemoose (incompatible with -ZProactive; Java 21+)
        ]
    else:
        raise ValueError(f"unknown java GC {gc!r}")

    return args

LOG4J_CONFIG_FILE = os.path.join(SERVER_DIR, "log4jconfig.xml")
FML_ARGS = [
    "-Dfml.queryResult=confirm",
    "-Dfml.readTimeout=900",
    "-Dfml.ignoreInvalidMinecraftCertificates=true",
    # "-Dfml.ignorePatchDiscrepancies=true",
] + ([
    '-Dlog4j.configurationFile="' + LOG4J_CONFIG_FILE + '"',
] if LOG4J_DEBUG and os.path.exists(LOG4J_CONFIG_FILE) else [])

FORGE_ARGS = ["nogui"]

START_ARGS = ["/HIGH", "/B", "/I"]

JVM_ARGS_FILE = os.path.join(SERVER_DIR, "user_jvm_args.txt")
WORLD_CONFIG_DIR = os.path.join(SERVER_DIR, "world", "serverconfig")
DEFAULTCONFIGS_DIR = os.path.join(SERVER_DIR, "defaultconfigs")

if WINDOWS:
    FORGE_LAUNCH_CMD = [os.path.join(SERVER_DIR, "run.bat")]
else:
    FORGE_LAUNCH_CMD = ["sh", os.path.join(SERVER_DIR, "run.sh")]

FORGE_INSTALLER_URL = format_vers("https://maven.minecraftforge.net/net/minecraftforge/forge/{mc_version}-{forge_version}/forge-{mc_version}-{forge_version}-installer.jar")

FORGE_INSTALLER_JAR = format_vers("forge-{mc_version}-{forge_version}-installer.jar")
FORGE_JAR = format_vers("forge-{mc_version}-{forge_version}.jar")

OLD_JARS_REGEX = full_regex(format_vers(r"(forge-(?!{mc_version}-{forge_version})[0-9.]+-[0-9.]+(-installer)?|minecraft_server\.(?!{mc_version})[0-9.]+)\.jar"))


# Client install constants

if sys.platform.startswith("win"):
    MINECRAFT_DIR = fixpath("~/AppData/Roaming/.minecraft")
elif sys.platform.startswith("darwin"):
    MINECRAFT_DIR = fixpath("~/Library/Application Support/minecraft")
else:
    MINECRAFT_DIR = fixpath("~/.minecraft")

PROFILES_FILE = os.path.join(MINECRAFT_DIR, "launcher_profiles.json")

README_FILE = "README.txt"

EXTRA_INSTALL_FILES += [
    README_FILE,
    FORGE_INSTALLER_JAR,
]


# Make launcher constants

LAUNCHER_FILE = first_that_exists([
    "~/Applications/Minecraft.app",
    "/Applications/Minecraft.app",
    r"C:\Program Files (x86)\Minecraft Launcher\MinecraftLauncher.exe",
    r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Minecraft Launcher\Minecraft Launcher.ink",
    r"C:\Users\Public\Desktop\Minecraft Launcher.ink",
])

MODPACK_NAME = "Evan's Modded Minecraft"


# Searchable mods constants

SEARCHABLE_MODS_NAME = MODS_NAME + "-searchable"
SEARCHABLE_CLIENT_MODS_NAME = CLIENT_MODS_NAME + "-searchable"


# Binary search constants

BINARY_SEARCH_FILE = os.path.join(SERVER_DIR, "binary_search.json")
