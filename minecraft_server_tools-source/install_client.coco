import os
import sys
import shutil
import zipfile
import tempfile
import json
from contextlib import contextmanager

from tqdm import tqdm

from minecraft_server_tools import sync_mods, launch_server
from minecraft_server_tools.constants import (
    WINDOWS,
    SERVER_DIR,
    MINECRAFT_DIR,
    EXTRA_INSTALL_FOLDERS,
    EXTRA_INSTALL_FILES,
    FORGE_INSTALLER_JAR,
    README_FILE,
    MOD_ZIP_PATH,
    OPTIONAL_INSTALL_FILES,
    OPTIONAL_INSTALL_FOLDERS,
    MODS_NAME,
    CLIENT_MODS_NAME,
    YES_STRS,
    NO_STRS,
    PROFILES_FILE,
    MODPACK_NAME,
    START_ARGS,
    LAUNCHER_FILE,
)

MINECRAFT_MODS_DIR = os.path.join(MINECRAFT_DIR, MODS_NAME)


def sync_client_mods(source_dir):
    print("\nInstalling mods...")
    all_client_mods = sync_mods.get_location_table_for(os.path.join(source_dir, MODS_NAME))
    all_client_mods.update(sync_mods.get_location_table_for(os.path.join(source_dir, CLIENT_MODS_NAME)))

    current_client_mods = sync_mods.get_location_table_for(MINECRAFT_MODS_DIR)

    sync_mods.set_mods_from_to(all_client_mods, current_client_mods, MINECRAFT_MODS_DIR)


def install_extras(source_dir, do_optional=True, clean=True):
    print("\nInstalling other files/folders...")
    for install_dir in EXTRA_INSTALL_FOLDERS + (OPTIONAL_INSTALL_FOLDERS if do_optional else []):
        from_dir = os.path.join(source_dir, install_dir)
        to_dir = os.path.join(MINECRAFT_DIR, install_dir)
        print(f"\t{install_dir}...")
        cleaned = False
        if clean and os.path.exists(to_dir):
            shutil.rmtree(to_dir)
            cleaned = True
        if os.path.exists(from_dir):
            shutil.copytree(from_dir, to_dir, dirs_exist_ok=True)
        elif cleaned:
            print("\t\t(cleaned)")
        else:
            print("\t\t(skipped)")

    for install_file in EXTRA_INSTALL_FILES + (OPTIONAL_INSTALL_FILES if do_optional else []):
        from_path = os.path.join(source_dir, install_file)
        to_path = os.path.join(MINECRAFT_DIR, install_file)
        print(f"\t{install_file}...")
        if os.path.exists(from_path):
            shutil.copy(from_path, to_path)
        else:
            print("\t\t(skipped)")


def ensure_forge_client(source_dir, force=False):
    if force or not os.path.exists(os.path.join(MINECRAFT_DIR, FORGE_INSTALLER_JAR)):
        print("\nOpening forge installer; select 'Install client' and press 'Ok'.")
        launch_server.run_java(["-jar", os.path.join(source_dir, FORGE_INSTALLER_JAR)])


def get_paths_to_zip():
    for install_fname in (
        EXTRA_INSTALL_FILES
        + OPTIONAL_INSTALL_FILES
    ):
        fpath = os.path.join(MINECRAFT_DIR, install_fname)
        if os.path.exists(fpath):
            yield fpath
        else:
            print(f"\tSkipped {fpath!r}...")
    for install_dirname in (
        EXTRA_INSTALL_FOLDERS
        + OPTIONAL_INSTALL_FOLDERS
        + [MODS_NAME]
    ):
        install_dirpath = os.path.join(MINECRAFT_DIR, install_dirname)
        for dirpath, dirnames, filenames in os.walk(install_dirpath):
            yield dirpath
            for fname in filenames:
                yield os.path.join(dirpath, fname)


def zip_mods():
    print(f"\nZipping mod files to {MOD_ZIP_PATH}...")
    with zipfile.ZipFile(MOD_ZIP_PATH, "w", zipfile.ZIP_DEFLATED) as zf:
        for install_path in tqdm(list(get_paths_to_zip())):
            zf.write(install_path, os.path.relpath(install_path, MINECRAFT_DIR))


def get_javaw_path():
    for where_cmd in ("which", "where"):
        try:
            paths = launch_server.get_cmd_output([where_cmd, "javaw"])
        except FileNotFoundError:
            pass
        else:
            break
    else:
        return None
    return (
        paths
        |> .splitlines()
        |> .$[0]
        |> .strip()
    )


def set_jvm_args():
    print("\nSetting JVM arguments...")
    with launch_server.using_graal_java():
        java_args = " ".join(launch_server.get_java_args(client=True))
        java_path = get_javaw_path()
        with open(PROFILES_FILE, "r+") as profiles_file:
            top_level_json = json.load(profiles_file)
            profiles = top_level_json["profiles"]
            if "forge" not in profiles:
                return False
            forge_profile = profiles["forge"]
            forge_profile["name"] = MODPACK_NAME
            forge_profile["javaArgs"] = java_args
            if java_path:
                print(f"\t(using java at: {java_path!r})")
                forge_profile["javaDir"] = java_path
            else:
                print("\t(failed to locate java)")

            profiles_file.seek(0)
            profiles_file.truncate()
            json.dump(top_level_json, profiles_file, indent=2)
    print(f"\tSet JVM args to: {java_args}")
    return True


def open_readme():
    installed_readme = os.path.join(MINECRAFT_DIR, README_FILE)
    print(f"\nOpening {installed_readme}...")
    if WINDOWS:
        launch_server.run_cmd(["explorer", installed_readme], check=False)
    else:
        launch_server.run_cmd(["xdg-open", installed_readme], check=False)


@contextmanager
def unzipped_mods():
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"\nUnzipping mods from {MOD_ZIP_PATH!r} to temporary directory {temp_dir!r}...")
        shutil.unpack_archive(MOD_ZIP_PATH, temp_dir)
        yield temp_dir


def install_from_dir(source_dir, do_optional=False):
    launch_server.clean_forge_jars(MINECRAFT_DIR)

    ensure_forge_client(source_dir)
    sync_client_mods(source_dir)
    if "--only-mods" not in sys.argv:
        install_extras(source_dir, do_optional)

    success = set_jvm_args()
    if not success:
        ensure_forge_client(source_dir, force=True)
        assert set_jvm_args(), "Failed to find Forge profile."


def install_from_server():
    """Install from server and return whether or not to install optional files."""
    sync_mods.main()
    launch_server.start_server(dry_run=True)

    install_from_dir(SERVER_DIR, do_optional=True)

    if "--only-mods" not in sys.argv and "--no-zip" not in sys.argv:
        zip_mods()
    return True


def ask_question(text, default):
    got = input(text).lower()
    if got in YES_STRS:
        return True
    elif got in NO_STRS:
        return False
    else:
        return default


def install_from_zip():
    """Install from zip and return whether or not to install optional files."""
    if "--yes-optional" in sys.argv:
        do_optional = True
    elif "--no-optional" in sys.argv:
        do_optional = False
    else:
        do_optional = ask_question(f"\nInstall optional files {OPTIONAL_INSTALL_FILES + OPTIONAL_INSTALL_FOLDERS}? [Y/n] ", True)
    if do_optional:
        print("Will install optional files.")
    else:
        print("Will NOT install optional files.")
    with unzipped_mods() as temp_dir:
        install_from_dir(temp_dir, do_optional)
    return do_optional


def launch_minecraft():
    print(f"\nLaunching Minecraft at {LAUNCHER_FILE!r}...")
    if not os.path.exists(LAUNCHER_FILE):
        raise OSError("Could not find Minecraft Launcher file!\n\nMod files have still been installed, but you'll need to launch Minecraft manually.")
    if WINDOWS:
        launch_server.run_cmd(["START", MODPACK_NAME] + START_ARGS + [LAUNCHER_FILE], shell=True)
    else:
        launch_server.run_cmd(["open", LAUNCHER_FILE])


def main():
    if os.path.exists(SERVER_DIR):
        print("\nInstalling from server...")
        do_optional = install_from_server()
    elif os.path.exists(MOD_ZIP_PATH):
        if "downloads" in MOD_ZIP_PATH.lower():
            print("WARNING: Using downloaded Minecraft Mods.zip instead of synchronized version; you will not get updates automatically.")
        print("\nInstalling from zipfile...")
        do_optional = install_from_zip()
    else:
        raise IOError("Could not find files for install (make sure you have the 'Minecraft Mods' folder in your OneDrive).")
    if "--launch" in sys.argv:
        launch_minecraft()
    return do_optional


if __name__ == "__main__":
    main()
