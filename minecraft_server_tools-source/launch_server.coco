import os
import sys
import subprocess
from urllib.request import urlretrieve
from urllib.error import HTTPError

from minecraft_server_tools.constants import (
    WINDOWS,
    JAVA_EXECUTABLE,
    SERVER_RAM,
    FORGE_ARGS,
    FORGE_INSTALLER_URL,
    OLD_JARS_REGEX,
    SERVER_DIR,
    FORGE_JAR,
    FORGE_INSTALLER_JAR,
    JVM_ARGS_FILE,
    FORGE_LAUNCH_CMD,
    FML_ARGS,
    CLIENT_RAM,
    SERVER_GC,
    CLIENT_GC,
    DOWNLOADS_PATH,
    get_jvm_args,
)

FORGE_JAR_PATH = os.path.join(SERVER_DIR, FORGE_JAR)
FORGE_INSTALLER_JAR_PATH = os.path.join(SERVER_DIR, FORGE_INSTALLER_JAR)
DOWNLOADED_INSTALLER_PATH = os.path.join(DOWNLOADS_PATH, FORGE_INSTALLER_JAR)


def run_cmd(cmd, check=True, shell=False, get_output=False, quiet=False):
    if not quiet:
        print("> " + " ".join(str(x) for x in cmd))
    kwargs = {}
    if get_output:
        kwargs["stdout"] = kwargs["stderr"] = subprocess.PIPE
    return subprocess.run(cmd, check=check, shell=shell, **kwargs)


def run_high_priority(cmd, name="Minecraft Server"):
    if WINDOWS:
        return run_cmd(["START", name, "/B", "/I", "/WAIT", "/HIGH"] + cmd, shell=True)
    else:
        return run_cmd(cmd)


def run_java(cmd) = run_high_priority([JAVA_EXECUTABLE] + cmd)


def get_cmd_output(cmd, quiet=True):
    out = run_cmd(cmd, get_output=True, quiet=quiet)
    return out.stdout.decode("utf-8") + "\n" + out.stderr.decode("utf-8") |> .strip()


def install_forge_server():
    print(f"Installing forge from installer {FORGE_INSTALLER_JAR_PATH}...")
    run_java(["-jar", FORGE_INSTALLER_JAR_PATH, "--installServer"])


def move_forge_installer():
    if not os.path.exists(DOWNLOADED_INSTALLER_PATH):
        return False
    os.rename(DOWNLOADED_INSTALLER_PATH, FORGE_INSTALLER_JAR_PATH)
    return True


def ensure_forge_server():
    if not os.path.exists(FORGE_INSTALLER_JAR_PATH):
        print(f"Downloading forge installer {FORGE_INSTALLER_JAR_PATH}...")
        if not move_forge_installer():
            try:
                urlretrieve(FORGE_INSTALLER_URL, FORGE_INSTALLER_JAR_PATH)
            except HTTPError:
                print(f"Automatic download failed; please download from: {FORGE_INSTALLER_URL}")
                input("Press Enter to continue.")
                assert move_forge_installer()
        install_forge_server()


def clean_forge_jars(dir_to_clean=SERVER_DIR):
    for fname in os.listdir(dir_to_clean):
        if OLD_JARS_REGEX.match(fname) is not None:
            print(f"Removing old jar {fname}...")
            os.remove(os.path.join(dir_to_clean, fname))


def check_if_graal(java="java"):
    try:
        return "GraalVM" in get_cmd_output([java, "-version"])
    except FileNotFoundError:
        return None


def get_java_args(client=False):
    if client:
        ram = CLIENT_RAM
        gc = CLIENT_GC
    else:
        ram = SERVER_RAM
        gc = SERVER_GC
    return (
        ["-Xmx" + ram, "-Xms" + ram]
        + get_jvm_args(gc=gc, vm="graal" if check_if_graal() else "java")
        + FML_ARGS
    )


def fix_run_bat():
    with open(os.path.join(SERVER_DIR, "run.bat"), "r+") as run_bat:
        content = run_bat.read()
        run_bat.seek(0)
        run_bat.truncate()
        run_bat.write(content.replace("pause", "exit"))


def write_jvm_args():
    with open(JVM_ARGS_FILE, "w") as jvm_args_file:
        jvm_args_file.write("\n".join(get_java_args()) + "\n")


def start_server(dry_run=False):
    clean_forge_jars()
    ensure_forge_server()
    fix_run_bat()
    write_jvm_args()
    if not dry_run:
        if os.path.exists(FORGE_JAR_PATH):
            run_java(get_java_args() + [FORGE_JAR_PATH] + FORGE_ARGS)
        else:
            run_high_priority(FORGE_LAUNCH_CMD + FORGE_ARGS)


def main():
    start_server(dry_run="--dry-run" in sys.argv)


if __name__ == "__main__":
    main()
