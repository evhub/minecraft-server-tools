from minecraft_server_tools import sync_mods
from minecraft_server_tools.constants import (
    COMMENT_JSON,
    BINARY_SEARCH_FILE,
    YES_STRS,
    NO_STRS,
    UPDATED_MODS_DIR_SUFFIX,
    OLD_MODS_DIR_SUFFIX,
    BASE_MODS_NAME,
    MODS_NAME,
)


def write_binary_search_file(binary_search):
    COMMENT_JSON.dumpf(binary_search, BINARY_SEARCH_FILE)


def get_num_mods_in(folder) =
    len(sync_mods.get_location_table_for(folder))


def init_binary_search(folder_a, folder_b, destination):
    binary_search = {
        "searching": True,
        "folder_a": folder_a,
        "folder_b": folder_b,
        "destination": destination,
        "results": [],
    }

    num_mods_in_a = get_num_mods_in(sync_mods.get_binary_search_folder(binary_search, "folder_a"))
    num_mods_in_b = get_num_mods_in(sync_mods.get_binary_search_folder(binary_search, "folder_b"))
    assert num_mods_in_a == num_mods_in_b, f"{num_mods_in_a} != {num_mods_in_b}"

    binary_search["num_a"] = num_mods_in_a // 2

    old_binary_search = sync_mods.load_binary_search_file()
    if old_binary_search not in (binary_search, {"searching": False}):
        binary_search["backup"] = old_binary_search

    write_binary_search_file(binary_search)
    return binary_search


def get_binary_search_window(binary_search):
    num_mods_in_a = get_num_mods_in(sync_mods.get_binary_search_folder(binary_search, "folder_a"))

    window_min, window_max = 0, num_mods_in_a
    prev_num_a = None
    new_num_a = num_mods_in_a // 2
    for r in binary_search["results"]:
        prev_num_a = (window_min + window_max) // 2
        if r:
            window_min = prev_num_a
        else:
            window_max = prev_num_a
        new_num_a = (window_min + window_max) // 2
    return window_min, window_max, prev_num_a, new_num_a


def binary_search_step(binary_search):
    assert binary_search["results"], "can't binary_search_step if no results"

    window_min, window_max, prev_num_a, new_num_a = get_binary_search_window(binary_search)

    if new_num_a == prev_num_a:
        return True, binary_search

    assert binary_search["num_a"] is None or binary_search["num_a"] == prev_num_a, f"{binary_search['num_a']} != {num_a}"

    new_binary_search = binary_search.copy()
    new_binary_search["num_a"] = new_num_a
    write_binary_search_file(new_binary_search)

    return False, new_binary_search


def get_bool_input(message):
    while True:
        got = input(message + " ").lower()
        if got in YES_STRS:
            return True
        elif got in NO_STRS:
            return False
        else:
            print("Unrecognized input; try again.")


def add_result(binary_search, result):
    new_binary_search = binary_search.copy()
    new_binary_search["results"].append(result)
    write_binary_search_file(new_binary_search)
    return new_binary_search


def show_search_delta(old_binary_search, new_binary_search):
    assert old_binary_search["num_a"] != new_binary_search["num_a"], f"{old_binary_search['num_a']} != {new_binary_search['num_a']}"

    old_mods = sync_mods.get_binary_search_location_table(old_binary_search)
    new_mods = sync_mods.get_binary_search_location_table(new_binary_search)

    print("New binary search step:")
    for mod in old_mods:
        if mod not in new_mods:
            print("\tout:", mod)
    for mod in new_mods:
        if mod not in old_mods:
            print("\tin:", mod)


def show_search_results(binary_search):
    window_min, window_max, prev_num_a, new_num_a = get_binary_search_window(binary_search)

    mods_a = sync_mods.get_sorted_location_table_items_for(sync_mods.get_binary_search_folder(binary_search, "folder_a"))
    mods_b = sync_mods.get_sorted_location_table_items_for(sync_mods.get_binary_search_folder(binary_search, "folder_b"))

    zipped_mods = list(zip(mods_a, mods_b))
    clean_mods = zipped_mods[: window_min]
    culprits = zipped_mods[window_min : window_max]

    print("Clean mods:")
    for (name_a, path_a), (name_b, path_b) in clean_mods:
        print(f"- {name_a} -> {name_b}")

    print("Culprit mods:")
    for (name_a, path_a), (name_b, path_b) in culprits:
        print(f"- {name_a} -> {name_b}")


def run_binary_search(binary_search):
    if binary_search["num_a"] is None:
        done, binary_search = binary_search_step(binary_search)
        assert done is False, done

    fake_old_binary_search = binary_search.copy()
    fake_old_binary_search["num_a"] = 0
    show_search_delta(fake_old_binary_search, binary_search)

    done = False
    while not done:
        done, new_binary_search = binary_search_step(add_result(binary_search, get_bool_input("Enter binary search result (did it work?):")))

        show_search_results(new_binary_search)
        if not done:
            show_search_delta(binary_search, new_binary_search)

        binary_search = new_binary_search


def disable_binary_search(binary_search):
    new_binary_search = binary_search.copy()
    new_binary_search["searching"] = False
    write_binary_search_file(new_binary_search)


def main(folder_a, folder_b, destination):
    binary_search = sync_mods.load_binary_search_file()
    if binary_search["searching"]:
        new = not get_bool_input("It looks like you already have a search in progress. Continue?")
    else:
        new = True

    if new:
        binary_search = init_binary_search(folder_a, folder_b, destination)

    run_binary_search(binary_search)
    disable_binary_search(binary_search)



if __name__ == "__main__":
    main(
        BASE_MODS_NAME + UPDATED_MODS_DIR_SUFFIX,
        BASE_MODS_NAME + OLD_MODS_DIR_SUFFIX,
        MODS_NAME,
    )
